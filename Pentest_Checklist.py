
# Generate a checklist for your pentest in the form of an HTML page

# Python Imports
import logging, os
# My Imports
import Assessment_Report, DB_Connect, Print_Banner, Main_Menu
from Guinevere import get_color, get_G_root, get_args

def generate_pentest_checklist():
    """Generate a pentest checklist to be used for an assessment"""

    G_root = get_G_root()
    warn = get_color('warn')
    note = get_color('note')
    args = get_args()

    logging.info('Entered into pentest_checklist function')

    def build_html():
        """Generate HTML pentest checklist"""

        html_part = ''

        host_part = '\n<table>\n\t<tr id="$host-id" class="Host">\n\t\t<th class="Host-Header-Check"><input type=' \
                    '"checkbox"></th>\n\t\t<th class="Host-Header">$host-name</th>\n\t</tr>'
        port_part = '\n\t<tr id="$host-id_$port-id" class="Port">\n\t\t<td class="Port-Header-Check"><input ' \
                    'type="checkbox"></td>\n\t\t<td class="Port-Header">$port-text</td>\n\t</tr>'
        tool_part = '\n\t<tr id="$host-id_$port-id_$tool-id" class="Tool-$tool-name">\n\t\t<td colspan="2" class=' \
                    '"Tool-Header"title="$tool-name">$vuln-title</td>\n\t</tr>'
        tool_output_part = '\n\t<tr id="$host-id_$port-id_$tool-id_Output" class="Tool_Output">\n\t\t<td colspan="2">' \
                           '<pre>$tool-output</pre></td>\n\t</tr>'
        note_part = '\n\t<tr class="Notes">\n\t\t<td colspan="2"><input type="text" class="Notes-Text"></td>\n\t</tr>'

        for host in hosts2:
            # Build table Header for each host
            html_part += host_part
            if hosts2[host]['fqdn'][0] is not "":
                html_part = html_part.replace('$host-name', hosts2[host]['ipv4'] + " - " + hosts2[host]['fqdn'][0])
            else:
                html_part = html_part.replace('$host-name', hosts2[host]['ipv4'])

            # Build Port Rows
            for port_id in hosts2[host]['ports']:
                html_part += port_part

                # Build Vulnerability Rows
                if 'vulns' in hosts2[host]['ports'][port_id].keys() and args.tool_output:
                    for vuln_id in hosts2[host]['ports'][port_id]['vulns']:
                        html_part += tool_part
                        html_part += tool_output_part
                        tool_name = hosts2[host]['ports'][port_id]['vulns'][vuln_id]['tool']
                        html_part = html_part.replace('$tool-id', tool_name + "-" + vuln_id)
                        html_part = html_part.replace('$tool-name', tool_name)
                        html_part = html_part.replace('$vuln-title',
                                                      str(hosts2[host]['ports'][port_id]['vulns'][vuln_id]['title']))
                        html_part = html_part.replace('$tool-output',
                                                      (hosts2[host]['ports'][port_id]['vulns'][vuln_id]['output'])
                                                      .replace('&', '&amp;')
                                                      .replace('<', '&lt;')
                                                      .replace('>', '&gt;'))

                html_part = html_part.replace('$port-id', hosts2[host]['ports'][port_id]['port'] + "-" +
                                              hosts2[host]['ports'][port_id]['type'])
                html_part = html_part.replace('$port-text', hosts2[host]['ports'][port_id]['port'] + "/" +
                                              hosts2[host]['ports'][port_id]['type'] + "/" +
                                              str(hosts2[host]['ports'][port_id]['service']))

            html_part = html_part.replace('$host-id', hosts2[host]['ipv4'])
            html_part += (note_part * 3)
            html_part += '\n</table>'



        out_dir = Assessment_Report.get_path()
        checklist = os.path.join(out_dir, "Guinevere_"+assessment+"_checklist.html")
        html_file = open(checklist, 'w')
        # Build HTML File
        css = open(os.path.join(G_root, 'static', 'G-Checklist', 'G-Checklist.css'), 'r').read()
        html = open(os.path.join(G_root, 'static', 'G-Checklist', 'G-Checklist_Template.html'), 'r').read()
        html = html.replace('$ASSESSMENT', assessment)
        html = html.replace('$CSS', css)
        html = html.replace('$DATA', html_part)
        html_file.write(html)
        html_file.close()
        print "["+warn+"]Report saved to: " + checklist

    logging.info('Entered into build_html function within the pentest_checklist function')
    assessment = DB_Connect.get_assessment("the assessment to create a pentest checklist for")
    Print_Banner.print_banner()
    print "["+note+"]Building Pentest Checklist for " + assessment + "..."
    # hosts1 holds the record set returned from the SQL query
    hosts1 = DB_Connect.db_query("""SELECT hosts.host_id, ip_address, fqdn, port_id, port, protocol, name """
                      """FROM hosts INNER JOIN ports ON hosts.host_id=ports.host_id WHERE port IS NOT NULL""",
                      assessment)
    host_ids = []   # A list to store retrieved host IDs
    hosts2 = {}     # A dictionary that holds the data used to print the checklist

    for row in hosts1:
        if row[0] not in host_ids:
            host_ids.append(row[0])

    for host_id in host_ids:
        hosts2[host_id] = {'ports': {}}    # Create a key in the hosts2 dictionary from the host id
        for row in hosts1:
            if host_id == row[0]:
                hosts2[host_id].update({'ipv4': row[1]})
                if 'fqdn' in hosts2[host_id].keys():
                    if row[2] not in hosts2[host_id]['fqdn']:
                        hosts2[host_id]['fqdn'].append(row[2])
                else:
                    hosts2[host_id].update({'fqdn': [row[2]]})
                if row[4] > 0:
                    hosts2[host_id]['ports'][row[3]] = {}
                    hosts2[host_id]['ports'][row[3]].update({'port': row[4]})
                    hosts2[host_id]['ports'][row[3]].update({'type': row[5]})
                    hosts2[host_id]['ports'][row[3]].update({'service': row[6]})

                #This check for the "tool_title" is here for backward compatability, remove when version are higher
                columns = DB_Connect.db_query("""SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA =
                                    'gauntlet_%s' AND TABLE_NAME = 'vulnerabilities'""" % (assessment), assessment)
                if any('tool_title' in column for column in columns):
                    tool_data = DB_Connect.db_query("""SELECT vuln_id, gnaat_id, tool, txt, tool_title FROM vulnerabilities
                                        WHERE host_id=%s and port_id=%s""" % (str(host_id), str(row[3])), assessment)
                    hosts2[host_id]['ports'][row[3]]['vulns'] = {}
                    for tool in tool_data:
                        hosts2[host_id]['ports'][row[3]]['vulns'].update({tool[0]: {'gnaat_id': tool[1],
                                                                                    'tool': tool[2],
                                                                                    'title': tool[4],
                                                                                    'output': tool[3],
                                                                                    'vuln_id': tool[0]}})
                else:
                    tool_data = DB_Connect.db_query("""SELECT vuln_id, gnaat_id, tool, txt FROM vulnerabilities
                                        WHERE host_id= %s and port_id= %s""" % (str(host_id), str(row[3])), assessment)
                    if tool_data:
                        hosts2[host_id]['ports'][row[3]]['vulns'] = {}
                    for tool in tool_data:
                        if tool[1] != "":
                            title = DB_Connect.db_query("SELECT title from vulns where gnaat_id=%s" % (tool[1]), 'GauntletData')
                        else:
                            title = None
                        if title is not None and len(title) > 0:
                            hosts2[host_id]['ports'][row[3]]['vulns'].update({tool[0]: {'gnaat_id': tool[1],
                                                                                        'tool': tool[2],
                                                                                        'title': title[0][0],
                                                                                        'output': tool[3],
                                                                                        'vuln_id': tool[0]}})
                        else:
                            hosts2[host_id]['ports'][row[3]]['vulns'].update({tool[0]: {'gnaat_id': tool[1],
                                                                                        'tool': tool[2],
                                                                                        'title': None,
                                                                                        'output': tool[3],
                                                                                        'vuln_id': tool[0]}})

    build_html()
    raw_input("["+note+"]Press enter to return to the main menu")

    Main_Menu.print_main_menu()
